package cmd

import (
	"errors"
	"fmt"
	"os"
	"regexp"

	"github.com/c-bata/go-prompt"
	"github.com/ilsft/Golendar/app/events"
	"github.com/ilsft/Golendar/app/logger"
	validators "github.com/ilsft/Golendar/app/utils"
)

const (
	errLenAddMessage         = "–§–æ—Ä–º–∞—Ç: add \"–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\" \"–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\" \"–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\""
	errLenUpdMessage         = "–§–æ—Ä–º–∞—Ç: update \"id —Å–æ–±—ã—Ç–∏—è\" \"–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\" \"–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\" \"–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\""
	errLenAddReminderMessage = "–§–æ—Ä–º–∞—Ç: add_rm \"id —Å–æ–±—ã—Ç–∏—è\" \"–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\" \"–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\""
)

const (
	unknownCommand        = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:"
	enterEventTitlePrompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
	deafaultMessage       = "–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
	emptyInput            = "–ü—É—Å—Ç–æ–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
)

const (
	ErrEmptyTitle     = "–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ–±—ã—Ç–∏—è"
	ErrPastTimeTravel = "–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—à–ª–æ–µ"
)

const EventShowMessage = "üìÖC–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π‚úÖ"
const helpMessage = `add ‚úÖ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, ` + errLenAddMessage + `
remove ‚ùå ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ <tab>
list üìí ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ id - –Ω–∞–∑–≤–∞–Ω–∏–µ - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
update ‚úèÔ∏è ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –Ω–∞–π—Ç–∏ id —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ <list>, 
–¥–∞–ª–µ–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ, ` + errLenUpdMessage + `
add_rm üîî ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
stop_rm ‚è∏Ô∏è ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
remove_rm üóëÔ∏è ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
log üìú ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
exit üèÅ ‚Äî –≤—ã—Ö–æ–¥`

var idRegexp = regexp.MustCompile(`ID:([\w-]+)`)

func (c *Cmd) completerEvent(d prompt.Document) []prompt.Suggest {
	suggestions := []prompt.Suggest{}
	for _, event := range c.calendar.CalendarEvents {
		suggestions = append(suggestions, prompt.Suggest{
			Text:        fmt.Sprintf("%s | ID:%s", event.Title, event.ID[:4]),
			Description: fmt.Sprintf("%s | %s ", event.StartAt.Format("2006-01-02"), event.Priority),
		})
	}
	return prompt.FilterHasPrefix(suggestions, d.GetWordBeforeCursor(), true)
}

func (c *Cmd) searchID(input string) string {
	matches := idRegexp.FindStringSubmatch(input)
	if len(matches) > 1 {
		shortID := matches[1]
		for _, event := range c.calendar.CalendarEvents {
			if len(event.ID) > 4 && event.ID[:4] == shortID {
				return event.ID
			}
		}
	}
	return (input)
}

func (c *Cmd) handleEventPrompt(f func(string) (string, error)) (string, error) {
	t := prompt.Input(enterEventTitlePrompt, c.completerEvent)
	fullEventID := c.searchID(t)
	msg, err := f(fullEventID)
	if err != nil {
		return "", err
	}
	return msg, nil
}

func (c *Cmd) notifyResult(msg string, err error) bool {
	if err != nil {
		c.handlePrint(err.Error())
		logger.LogError(err.Error())
		return false
	}
	c.handlePrint(msg)
	logger.LogInfo(msg)
	return true
}

func (c *Cmd) handleAddCmd(parts []string) {
	if len(parts) < 4 {
		c.handlePrint(errLenAddMessage)
		logger.LogError(errLenAddMessage)
		return
	}
	title := parts[1]
	date := parts[2]
	priority := events.Priority(parts[3])
	msg, err := c.calendar.AddEvent(title, date, priority)
	switch {
	case errors.Is(err, validators.ErrEmptyTitle):
		c.handlePrint(ErrEmptyTitle)
		logger.LogError(ErrEmptyTitle)
	case errors.Is(err, validators.ErrDateAlreadyPassed):
		c.handlePrint(ErrPastTimeTravel)
		logger.LogError(ErrPastTimeTravel)
	default:
		if !c.notifyResult(msg, err) {
			return
		}
	}
}
func (c *Cmd) handleDeleteCmd() {
	msg, err := c.handleEventPrompt(c.calendar.DeleteEvent)
	if !c.notifyResult(msg, err) {
		return
	}
}
func (c *Cmd) handleEditeCmd(parts []string) {
	if len(parts) < 5 {
		c.handlePrint(errLenUpdMessage)
		logger.LogError(errLenUpdMessage)
		return
	}
	id := parts[1]
	title := parts[2]
	date := parts[3]
	priority := events.Priority(parts[4])
	msg, err := c.calendar.EditEvent(id, title, date, priority)
	if !c.notifyResult(msg, err) {
		return
	}
}
func (c *Cmd) handleAddReminderCmd(parts []string) {
	if len(parts) < 4 {
		c.handlePrint(errLenAddReminderMessage)
		logger.LogError(errLenAddReminderMessage)
		return
	}
	id := parts[1]
	message := parts[2]
	time := parts[3]
	msg, err := c.calendar.SetEventReminder(id, message, time)
	if !c.notifyResult(msg, err) {
		return
	}
}
func (c *Cmd) handleStopReminderCmd() {
	msg, err := c.handleEventPrompt(c.calendar.CancelEventReminder)
	if !c.notifyResult(msg, err) {
		return
	}
}
func (c *Cmd) handleDeleteReminderCmd() {
	msg, err := c.handleEventPrompt(c.calendar.RemoveEventReminder)
	if !c.notifyResult(msg, err) {
		return
	}
}

func (c *Cmd) handleShowEventsCmd() {
	c.handlePrint(EventShowMessage)
	c.calendar.Notify(c.calendar.ShowEvents())
}

func (c *Cmd) handleShowLogsCmd() {
	fmt.Println(l.showLogs())
}
func (c *Cmd) handleShowHelpCmd() {
	c.handlePrint(helpMessage)
}

func (c *Cmd) handlePrint(msg string) {
	fmt.Println(msg)
	l.logMessage(msg)
}

func (c *Cmd) handleExitCmd() {
	close(c.calendar.Notification)
	os.Exit(0)
}

func (c *Cmd) handleDefaultCmd(cmd string) {
	msg := (unknownCommand + cmd)
	c.handlePrint(msg)
	c.handlePrint(deafaultMessage)
	logger.LogError(msg)
}
